# The log rounds to use, between 4 and 31.
# The larger the strength parameter the more work will have to be done
# (exponentially) to hash the passwords. The default value is 10.
webstudio.bcrypt.strength = 10

webstudio.analytics = false

# Define if the WebStudios are configured to work, if not, then at startup the install wizard for setup will be shown.
webstudio.configured = false

# System properties
custom.spreadsheet.type = true
dispatching.mode = java
dispatching.validation=true

# Define authentication mode
# single - no authentication. Single DEFAULT user with Admin privileges will be used. Useful for local usage.
# demo - In-memory db-based with predefined set of users: a1, u0 ... u4, user, admin
# multi - Db-based authentication. With initial admin user. See also db.* properties
# ad - LDAP / Active Directory.
# saml - SAML.
# cas - CAS.
# Additional settings see in security.* properties
user.mode = single

# The initial privileged users, separated by comma, for initial setupping WebStudio with ADMIN permissions.
# Creates users if they absent in the DB, and assigns a group with ADMIN permission.
# If such group is absent, then it will be created.
security.administrators =

# This property allows to define default group for any authenticated user. It can be a restricted read-only 'Viewers'
# group. So every loginned user can see but not modify projects in the WebStudio. When this property is defined,
# logged in users automatically are added to the DB, so it simplifies managing those users on the first time.
security.default-group =

# The number of threads in which tests will be executed
test.run.thread.count = 4

compile.auto = true

# Encoding that can be used to uncompress zip file if UTF-8 isn't applicable.
# Note: often in Windows zips are compressed using DOS charset depending on system locale, not Windows ANSI charset.
zip.charsets.support = IBM866, IBM437, IBM850, windows-1252, windows-1251, windows-1250, ISO-8859-1

# Common properties

user.workspace.home = ${openl.home.shared}/user-workspace

project.history.count = 100

update.system.properties = false
data.format.date = MM/dd/yyyy
data.format.time = hh:mm:ss a
data.format.datetime = ${data.format.date} ${data.format.time}

# Compatibility properties
openl.compatibility.version =

### DB properties
db.url = jdbc:h2:${openl.home}/users-db/db;AUTO_SERVER=TRUE
db.user =
db.password =
flyway.locations = /db/flyway/common
###

### User settings default values
rules.tree.view = type

table.view = developer
table.formulas.show = false

test.export.to.excel = false
test.tests.perpage = 5
test.failures.only = false
test.failures.pertest = 5
test.result.complex.show = false
trace.realNumbers.show = false

accept.sharing.notifications = true

#Define default module mode in WebStudio: SINGLE, MULTI, SINGLE_ONLY, MULTI_ONLY
#SINGLY_ONLY and MULTI_ONLY disable ability to choose module mode in UI
#MULTI value is used by default
project.module.default.mode = MULTI

# Define default project groupings in Repository. Possible values: [Repository] to group by repository
# or any Tag Type defined in Admin page.
project.grouping.level.1 =
project.grouping.level.2 =
project.grouping.level.3 =
###

### Diff manager properties
# Comparison cleanup time after inactivity period (in seconds)
diff-manager.inactive-cleanup-period = 600

### Design Repository properties
design-repository-configs = design

repository.design.name = Design

# Which class should we instantiate in RepositoryFactory?
repository.design.factory = repo-git
# Repository URI
repository.design.uri =

repository.design.login =
repository.design.password =

# The path in repository where Projects are stored. Must end with "/".
repository.design.base.path = DESIGN/rules/



# If true, all projects will be stored in the folder configured in "repository.design.base.path" property.
# If false, projects can be stored in any folder.
repository.design.folder-structure.flat = true

### AWS S3 Specific
# A logical unit of storage in AWS object storage service. Globally unique.
repository.design.bucket-name = ${repo-aws-s3.bucket-name}
# AWS Region that is geographically close to you to optimize latency, minimize costs etc.
repository.design.region-name = ${repo-aws-s3.region-name}
# Alphanumeric text string that is used to identify the user who owns the account.
repository.design.access-key = ${repo-aws-s3.access-key}
# Plays the role of a password for a given access-key.
repository.design.secret-key = ${repo-aws-s3.secret-key}
###

### Git Specific
# Local path for Git repository.
repository.design.local-repository-path = ${openl.home}/repositories/design
# The branch where the changes will be committed.
# If this property is not defined then default branch from a remote repository will be used.
# When it is impossible to determine the default branch "master" branch will be used.
repository.design.branch = ${repo-git.branch}
# Prefix for automatically generated tag which will be added to every commit.
repository.design.tag-prefix = ${repo-git.tag-prefix}
# Comment message template for Git commits.
# - {username} is replaced by Webstudio username.
# - {user-message} is replaced by user defined commit message. This part of commit message is mandatory.
# - {commit-type} is a system property for commits to recognize commit type from a message. This part of commit message is mandatory.
repository.design.comment-template = ${repo-git.comment-template}
# New branch pattern. Use {project-name}, {username} and {current-date} to replace them with the corresponding values.
# Must not contain the following characters: \ : * ? " < > | { } ~ ^
# Should not contain consecutive symbols '.' or '/'. Can not start with '.' or '/'.
repository.design.new-branch.pattern = WebStudio/{project-name}/{username}/{current-date}
# Additional regular expression that will be used to validate the name of the new branch.
repository.design.new-branch.regex =
# An error message that will be shown to the user when trying to create a new branch with a name that does not match the additional regular expression.
repository.design.new-branch.regex-error =
# Committer's display name. If null, user name will be WebStudio user name.
repository.design.user-display-name = ${repo-git.user-display-name}
# Committer's email. If null, email will be empty.
repository.design.user-email = ${repo-git.user-email}
# Repository connection timeout in seconds. Must be greater than zero.
repository.design.connection-timeout = ${repo-git.connection-timeout}
# Time to wait after a failed authentication attempt before the next attempt.
# Needed to prevent a user being banned because of brute force attack.
repository.design.failed-authentication-seconds = ${repo-git.failed-authentication-seconds}
# The maximum number of authentication attempts, after which it will be possible to authorize only after
# resetting the settings or restarting the WebStudio.
repository.design.max-authentication-attempts = ${repo-git.max-authentication-attempts}
###

### AWS S3 and Git Specific
# Repository changes check interval in seconds. Must be greater than 0.
repository.design.listener-timer-period = ${repo-git.listener-timer-period}
###

# Regexp to validate comments. Can be empty. In this case comment will not be validated.
repository.design.comment-template.comment-validation-pattern =
# Message shown when comment isn't valid.
repository.design.comment-template.invalid-comment-message = Invalid comment: Comment doesn't match validation pattern
### User message defaults
repository.design.comment-template.use-custom-comments = false
repository.design.comment-template.user-message.default.save = Project {project-name} is saved.
repository.design.comment-template.user-message.default.create = Project {project-name} is created.
repository.design.comment-template.user-message.default.archive = Project {project-name} is archived.
repository.design.comment-template.user-message.default.restore = Project {project-name} is restored.
repository.design.comment-template.user-message.default.erase = Project {project-name} is erased.
repository.design.comment-template.user-message.default.copied-from = Copied from: {project-name}.
# Supported variables: {revision}, {author}, {datetime}
repository.design.comment-template.user-message.default.restored-from = Restored from revision of {author} on {datetime}.
###

### Deploy Configuration Repository properties
# If empty, Deploy Config Repository uses own settings.
# If not empty, specified Design Repository is used to store Deploy Configurations.
repository.deploy-config.use-repository =

repository.deploy-config.name = Deploy Configuration

# Which class should we instantiate in RepositoryFactory?
repository.deploy-config.factory = repo-git

# Deploy config repository URI
repository.deploy-config.uri =

repository.deploy-config.login =
repository.deploy-config.password =

# The path in repository where Deploy Configurations are stored. Must end with "/".
repository.deploy-config.base.path = DESIGN/deployments/

# If true, all projects will be stored in the folder configured in "repository.deploy-config.base.path" property.
# If false, projects can be stored in any folder.
repository.deploy-config.folder-structure.flat = true

### AWS S3 Specific
# A logical unit of storage in AWS object storage service. Globally unique.
repository.deploy-config.bucket-name = ${repo-aws-s3.bucket-name}
# AWS Region that is geographically close to you to optimize latency, minimize costs etc.
repository.deploy-config.region-name = ${repo-aws-s3.region-name}
# Alphanumeric text string that is used to identify the user who owns the account.
repository.deploy-config.access-key = ${repo-aws-s3.access-key}
# Plays the role of a password for a given access-key.
repository.deploy-config.secret-key = ${repo-aws-s3.secret-key}
###

### Git Specific
# Local path for Git repository.
repository.deploy-config.local-repository-path = ${openl.home}/repositories/deploy-config
# The branch where the changes will be committed.
# If this property is not defined then default branch from a remote repository will be used.
# When it is impossible to determine the default branch "master" branch will be used.
repository.deploy-config.branch = ${repo-git.branch}
# Prefix for automatically generated tag which will be added to every commit.
repository.deploy-config.tag-prefix = ${repo-git.tag-prefix}
# Comment message template for Git commits.
# - {username} is replaced by Webstudio username.
# - {user-message} is replaced by user defined commit message. This part of commit message is mandatory.
# - {commit-type} is a system property for commits to recognize commit type from a message. This part of commit message is mandatory.
repository.deploy-config.comment-template = ${repo-git.comment-template}
# Committer's display name. If null, user name will be WebStudio user name.
repository.deploy-config.user-display-name = ${repo-git.user-display-name}
# Committer's email. If null, email will be empty.
repository.deploy-config.user-email = ${repo-git.user-email}
# Repository connection timeout in seconds. Must be greater than zero.
repository.deploy-config.connection-timeout = ${repo-git.connection-timeout}
# Time to wait after a failed authentication attempt before the next attempt.
# Needed to prevent a user being banned because of brute force attack.
repository.deploy-config.failed-authentication-seconds = ${repo-git.failed-authentication-seconds}
# The maximum number of authentication attempts, after which it will be possible to authorize only after
# resetting the settings or restarting the WebStudio.
repository.deploy-config.max-authentication-attempts = ${repo-git.max-authentication-attempts}
###

### AWS S3 and Git Specific
# Repository changes check interval in seconds. Must be greater than 0.
repository.deploy-config.listener-timer-period = ${repo-git.listener-timer-period}
###


# Regexp to validate comments. Can be empty. In this case comment will not be validated.
repository.deploy-config.comment-template.comment-validation-pattern =
# Message shown when comment isn't valid.
repository.deploy-config.comment-template.invalid-comment-message = Invalid comment: Comment doesn't match validation pattern
### User message defaults
repository.deploy-config.comment-template.use-custom-comments = false
repository.deploy-config.comment-template.user-message.default.save = Deploy configuration {project-name} is saved.
repository.deploy-config.comment-template.user-message.default.create = Deploy configuration {project-name} is created.
repository.deploy-config.comment-template.user-message.default.archive = Deploy configuration {project-name} is archived.
repository.deploy-config.comment-template.user-message.default.restore = Deploy configuration {project-name} is restored.
repository.deploy-config.comment-template.user-message.default.erase = Deploy configuration {project-name} is erased.
repository.deploy-config.comment-template.user-message.default.copied-from = Copied from: {project-name}.
# Supported variables: {revision}, {author}, {datetime}
repository.deploy-config.comment-template.user-message.default.restored-from = Restored from revision of {author} on {datetime}.
###

### Central Authentication Service (CAS) settings.
# WebStudio server url.
security.cas.app-url = https://localhost:8443/webstudio
# CAS server url.
security.cas.cas-server-url-prefix = https://localhost:9443/cas
# CAS 3.0 protocol validator prefix contains "/p3" in url (and is able to retrieve attributes). If CAS 2.0 is used, remove "/p3".
security.cas.cas-server-ticket-validator-prefix = ${security.cas.cas-server-url-prefix}/p3
# CAS attribute for First Name. Keep it empty if CAS server doesn't return this attribute.
security.cas.attribute.first-name =
# CAS attribute for Second Name. Keep it empty if CAS server doesn't return this attribute.
security.cas.attribute.last-name =
# CAS attribute for Groups. Keep it empty if CAS server doesn't return this attribute or groups are managed in WebStudio.
security.cas.attribute.groups =

### SAML settings.
# WebStudio server url.
security.saml.app-url = http://localhost:8080/webstudio
# SAML server metadata url.
security.saml.saml-server-metadata-url = http://localhost:9080/idp-meta.xml
# The time, in milliseconds, to wait for the metadata server to respond
security.saml.request-timeout = 15000
# File pointing to the JKS keystore
security.saml.keystore-file-path = classpath:security/keystore.jks
# Password to access the keystore
security.saml.keystore-password = changeit
# Service Provider alias for key in the keystore
security.saml.keystore-sp-alias = webstudio
# Password to access Service Provider key
security.saml.keystore-sp-password = ${security.saml.keystore-password}
# SAML attribute for Username. Keep it empty if SAML server doesn't return this attribute or if default algorithm for username retrieval must be used.
security.saml.attribute.username =
# SAML attribute for First Name. Keep it empty if SAML server doesn't return this attribute.
security.saml.attribute.first-name =
# SAML attribute for Second Name. Keep it empty if SAML server doesn't return this attribute.
security.saml.attribute.last-name =
# SAML attribute for Groups. Keep it empty if SAML server doesn't return this attribute or groups are managed in WebStudio.
security.saml.attribute.groups =
# Comma separated list of authentication contexts IDP is allowed to use when authenticating user. Can be empty.
security.saml.authentication-contexts = urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport
# Sets binding to be used for for sending SAML message to IDP. Can be empty. Possible values:
# urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST, urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect,
# urn:oasis:names:tc:SAML:2.0:bindings:PAOS, urn:oasis:names:tc:SAML:2.0:profiles:holder-of-key:SSO:browser, etc
security.saml.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect
# Set true for local logout (logging out only from WebStudio) and false for global logout (logging out from all services using this IdP)
security.saml.local-logout = false
# Is load-balancer or reverse-proxy in front of the local application
security.saml.is-app-after-balancer = false
# Scheme of the LB server - either http or https
security.saml.scheme=https
# Server name of the LB, e.g. www.myserver.com
security.saml.server-name=example.com
# Port of the server, in case value is <= 0 port will not be included in the requestURL and port from the original request will be used for getServerPort calls.
security.saml.server-port=443
# When true serverPort will be used in construction of LB requestURL.
security.saml.include-server-port-in-request-url = false
# Context path of the LB, must be starting with slash, e.g. /webstudio or / or etc
security.saml.context-path=/
# Maximum time between authentication of user and processing of an authentication statement.
security.saml.max-authentication-age=7200
security.saml.metadata-trust-check=true
# Base-64 encoded string, which contains a public key for SAML IDP Server
security.saml.server-certificate=

### Active Directory (AD) settings.
# Define the default domain against which a user will be logged in.
# If it is not defined, then the domain is retrieved from user's login.
#security.ad.domain=example.com
security.ad.domain=
# An authentication server
security.ad.server-url=ldap://ldap.example.com:3268
# Where groups are managed
# If true, then 'users' groups are managed by WebStudio using DB
# If false, then users' groups are retrieved from the LDAP. See security.ad.group-filter property
security.ad.groups-are-managed-in-studio=true

# Occurrences of {0} are replaced with UPN which looks like login@domain.
# Occurrences of {1} are replaced with the login only.
# The filter for searching logged in user in the LDAP system.
# - for PRE Windows 2000
#security.ad.search-filter=(&(objectClass=user)(sAMAccountName={1}))
# - simple case for OpenLDAP
#security.ad.search-filter=(uid={0})
# - for Active Directory
security.ad.search-filter=(&(objectClass=user)(userPrincipalName={0}))

# Occurrences of {2} are replaced with the DN of the found user.
# Select all groups and their nested groups in which is user belong from the LDAP
security.ad.group-filter=(&(objectClass=group)(member:1.2.840.113556.1.4.1941:={2}))

# Production Repository properties
production-repository-configs = production

repository.production.name = Deployment

# In case of DB via JDBC this property defines how to access it
repository.production.factory = repo-jdbc
repository.production.uri = jdbc:h2:mem:repo;DB_CLOSE_DELAY=-1

# In case of DB via JNDI this property defines how to access it
#repository.production.factory = repo-jndi
#repository.production.uri = java:comp/env/jdbc/deploymentDB

#Login and password for remote repository
repository.production.login =
repository.production.password =

### AWS S3 Specific
# A logical unit of storage in AWS object storage service. Globally unique.
repository.production.bucket-name = ${repo-aws-s3.bucket-name}
# AWS Region that is geographically close to you to optimize latency, minimize costs etc.
repository.production.region-name = ${repo-aws-s3.region-name}
# Alphanumeric text string that is used to identify the user who owns the account.
repository.production.access-key = ${repo-aws-s3.access-key}
# Plays the role of a password for a given access-key.
repository.production.secret-key = ${repo-aws-s3.secret-key}
###

### Git Specific
# Local path for Git repository.
repository.production.local-repository-path = ${openl.home}/repositories/production
# The branch where the changes will be committed.
# If this property is not defined then default branch from a remote repository will be used.
# When it is impossible to determine the default branch "master" branch will be used.
repository.production.branch = ${repo-git.branch}
# Prefix for automatically generated tag which will be added to every commit.
repository.production.tag-prefix = ${repo-git.tag-prefix}
# Comment template for commits. Use {username} for predefined OpenL-specific Commit Type used by OpenL,
# {user-message} for meaningful message describing commit, {username} for commit author.
repository.production.comment-template = ${repo-git.comment-template}
# Committer's display name. If null, user name will be WebStudio user name.
repository.production.user-display-name = ${repo-git.user-display-name}
# Committer's email. If null, email will be empty.
repository.production.user-email = ${repo-git.user-email}
# Repository connection timeout in seconds. Must be greater than zero.
repository.production.connection-timeout = ${repo-git.connection-timeout}
# Time to wait after a failed authentication attempt before the next attempt.
# Needed to prevent a user being banned because of brute force attack.
repository.production.failed-authentication-seconds = ${repo-git.failed-authentication-seconds}
# The maximum number of authentication attempts, after which it will be possible to authorize only after
# resetting the settings or restarting the WebStudio.
repository.production.max-authentication-attempts = ${repo-git.max-authentication-attempts}
###

### AWS S3 and Git Specific
# Repository changes check interval in seconds. Must be greater than 0.
repository.production.listener-timer-period= ${repo-git.listener-timer-period}
###
# The path in repository where Deployments are stored. Must end with "/".
repository.production.base.path=deploy/


#This file is showing to all WebStudio users
admin.notification-file=${openl.home.shared}/notification.txt


# Which class should we instantiate in RepositoryFactory?
repository.settings.factory = repo-file
# Repository URI
repository.settings.uri = ${openl.home.shared}/repositories/settings

# Folder for locks used in settings repository
repository.settings.locks.root = ${openl.home.shared}/locks/repositories/settings
# Maximum time a lock can live (in seconds).
repository.settings.locks.time-to-live = 60

# The default name and path for the module with the generated data types from the OpenAPI file
openapi.default.data.module.name = Models
openapi.default.data.module.path = rules/Models.xlsx
# The default name and path for the module with the generated rules from the OpenAPI file
openapi.default.algorithm.module.name = Algorithms
openapi.default.algorithm.module.path = rules/Algorithms.xlsx

### CORS support
#
# A list of origins that are allowed to access the resource.
# A * can be specified to enable access to resource from any origin.
# Otherwise, an allow list of comma separated origins can be provided. Eg: https://www.w3.org, https://www.example.com.
# The empty String - No origin is allowed to access the resource.
cors.allowed.origins =
# A comma separated list of HTTP methods that can be used to access the resource, using cross-origin requests.
# These are the methods which will also be included as part of Access-Control-Allow-Methods header in pre-flight response.
# Eg: GET,POST.
cors.allowed.methods = GET,OPTIONS,HEAD,PUT,POST
# A comma separated list of request headers that can be used when making an actual request.
# These headers will also be returned as part of Access-Control-Allow-Headers header in a pre-flight response.
# Eg: Origin,Accept.
cors.allowed.headers = Content-Type,Accept,api_key,Authorization
# The amount of seconds, browser is allowed to cache the result of the pre-flight request.
# This will be included as part of Access-Control-Max-Age header in the pre-flight response.
# A negative value will prevent CORS Filter from adding this response header to pre-flight response.
cors.preflight.maxage = 7200
