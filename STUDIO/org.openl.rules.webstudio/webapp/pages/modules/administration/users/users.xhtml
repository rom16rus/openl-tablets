<?xml version="1.0" encoding="UTF-8"?>
<ui:composition
        xmlns:ui="http://java.sun.com/jsf/facelets">

    <style>
        .white-space-pre {
            white-space: pre;
        }
        .users-group {
            display: inline-block;
            margin-bottom: 1.5px;
            margin-top: 1.5px;
        }
        .user-delete-link {
            cursor: pointer;
        }

    </style>

    <table class="table" id="users-form">
        <thead>
        <tr>
            <th scope="col">Username</th>
            <th scope="col">First Name</th>
            <th scope="col">Last Name</th>
            <th scope="col">Email</th>
            <th scope="col">Display Name</th>
            <th scope="col">Groups</th>
            <th class="users-internal-user" scope="col">Local user</th>
            <th scope="col"/>
        </tr>
        </thead>
        <tbody>
        <tr style="display: none">
            <td>
                <span class="clickable white-space-pre users-username-box" title="Edit" attr="users-username"/>
                <span class="warning-icon" title="Unsafe default password" attr="users-unsafe-default-password"/>
            </td>
            <td attr="users-firstname"/>
            <td attr="users-lastname"/>
            <td attr="users-email"/>
            <td attr="users-displayname"/>
            <td attr="users-groups">
                <span>
                    <span attr="users-group" class="badge users-group"/>
                </span>
            </td>
            <td class="users-internal-user" attr="users-internal-user"/>
            <td><a class="delete-icon user-delete-link" title="Delete" attr="users-delete"/></td>
        </tr>
        </tbody>
    </table>
    <br/>
    <br/>
    <a href="javascript:void(0)" onclick="RichFaces.$('modalAddUser').show()" id="users-add">Add New User</a>

    <ui:include src="/pages/modules/administration/users/addUser.xhtml"/>
    <ui:include src="/pages/modules/administration/users/editUser.xhtml"/>

    <script src="#{contextPath}/javascript/userDisplayNameSelectInitializer.js"></script>
    <script>//<![CDATA[

    const usersTableHandler = function () {
        console.log("aa");
        const $userRowTemplate = $j('#users-form>tbody>tr:nth-child(1)').remove();
        $userRowTemplate.show();
        const $userGroupTemplate = $userRowTemplate.find('[attr=users-groups]>span:nth-child(1)').remove();

        const fetchUserOptions = () => {
            $j.ajax({
                type: "GET",
                url: "#{contextPath}/web/users/options",
                datatype: "json"
            }).done(function (data) {
                if (data.userMode !== 'ad') {
                    $j(".users-internal-user").hide();
                }
                if (!(data.canCreateInternalUsers || data.canCreateExternalUsers)) {
                    $j(".users-username-box").prop("onclick", null).off("click")
                }
                $j("#users-add").toggle(data.canCreateInternalUsers || data.canCreateExternalUsers);
            });
        };

        const fetchNotMatchedUserGroups = (username, $notMatchedUserGroups) => {
            const $userGroups = $notMatchedUserGroups.parent();
            $j.ajax({
                type: "GET",
                url: '#{contextPath}/web/users/' + username + '/groups/external',
                data: {
                    matched: false
                },
                datatype: "json"
            }).done(function (data) {
                $notMatchedUserGroups.remove();
                data.forEach((extGroup) => {
                    let $userGroup = $userGroupTemplate.clone();
                    $userGroup.find('[attr=users-group]')
                        .text(ws.utils.escapeHtml(extGroup));
                    $userGroups.append($userGroup);
                })
            }).fail(function (data) {
                handleError(data.status);
            });
        };

        const groupsConfig = function () {
            let result = {};
            $j.ajax({
                type: "GET",
                url: "#{contextPath}/web/admin/management/groups/settings",
                datatype: "json",
                async: false,
            }).done(function (data) {
                result = data;
            });
            return result;
        }();

        const deleteUser = (userName) => {
            if (confirm('Are you sure you want to delete the user?')) {
                $j.ajax({
                    type: "DELETE",
                    url: "#{contextPath}/web/users/" + userName,
                    contentType: 'application/json',
                    dataType: 'json'
                }).done(function () {
                    rerenderTable();
                }).fail(function (data) {
                    handleError(data.status);
                });
            }
        }

        const rerenderTable = () => {
            $j('#users-form>tbody>tr').remove();
            renderTable();
        };

        const renderTable = () => {
            $j.ajax({
                type: "GET",
                url: "#{contextPath}/web/users",
                datatype: "json"
            }).done(function (data) {
                data.forEach(user => {
                    const $userRow = $userRowTemplate.clone();
                    const appendUserGroup = ($userGroup) => {
                        $userRow.find("[attr=users-groups]").append($userGroup);
                    };
                    const extGroups = user.externalGroups || [];
                    const groups = user.groups || [];
                    groups.forEach(group => {
                        if (extGroups.includes(group)) {
                            return;
                        }
                        const $userGroup = $userGroupTemplate.clone();
                        $userGroup.find('[attr=users-group]')
                            .addClass((group === "Administrators" ? ' badge-error' : ' badge-info'))
                            .text(ws.utils.escapeHtml(group));
                        appendUserGroup($userGroup);
                    });

                    extGroups.forEach(extGroup => {
                        const $userGroup = $userGroupTemplate.clone();
                        $userGroup.find('[attr=users-group]')
                            .addClass('badge-success')
                            .attr("title", "Matched external group")
                            .text(ws.utils.escapeHtml(extGroup));
                        appendUserGroup($userGroup);
                    });

                    if ((extGroups.length + groups.length) === 0 && groupsConfig?.defaultGroup != null) {
                        const $userGroup = $userGroupTemplate.clone();
                        $userGroup.find('[attr=users-group]')
                            .addClass('badge-info')
                            .attr("title", "Default group")
                            .text(ws.utils.escapeHtml(groupsConfig.defaultGroup));
                        appendUserGroup($userGroup);
                    }

                    if (user.notMatchedExternalGroupsCount > 0) {
                        const $userGroup = $userGroupTemplate.clone();
                        $userGroup.find('[attr=users-group]')
                            .addClass("clickable")
                            .attr("title", "Expand not matched external groups")
                            .text(ws.utils.escapeHtml('+' + user.notMatchedExternalGroupsCount));
                        $userGroup.click(() => {
                            fetchNotMatchedUserGroups(user.username, $userGroup);
                        });
                        appendUserGroup($userGroup);
                    }

                    const $userName = $userRow.find('[attr=users-username]');
                    $userName.click(() => {
                        showEditUserForm(user, groupsConfig);
                    });
                    $userName.text(ws.utils.escapeHtml(user.username));
                    if (!user.unsafePassword) {
                        $userRow.find('[attr=users-unsafe-default-password]').remove();
                    }
                    $userRow.find('[attr=users-firstname]').text(ws.utils.escapeHtml(user.firstName));
                    $userRow.find('[attr=users-lastname]').text(ws.utils.escapeHtml(user.lastName));
                    $userRow.find('[attr=users-internal-user]').text(user.internalUser ? 'Yes' : 'No');
                    $userRow.find('[attr=users-email]').text(ws.utils.escapeHtml(user.email));
                    $userRow.find('[attr=users-displayname]').text(ws.utils.escapeHtml(user.displayName));

                    const $userDelete = $userRow.find('[attr=users-delete]');
                    if (user.superUser || user.currentUser) {
                        $userDelete.addClass("disabled");
                    } else {
                        $userDelete.click(() => {
                            deleteUser(user.username);
                        });
                    }

                    $j('#users-form>tbody').append($userRow);
                });
                fetchUserOptions();
            }).fail(function (data) {
                handleError(data.status);
            });
        };

        return {
            render: renderTable,
            rerender: rerenderTable
        }
    }();

    usersTableHandler.render();

    //]]></script>

</ui:composition>
