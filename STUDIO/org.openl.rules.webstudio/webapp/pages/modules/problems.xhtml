<ui:composition
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:c="http://java.sun.com/jsp/jstl/core"
        xmlns:ui="http://java.sun.com/jsf/facelets">

    <c:set var="contextPath" value="#{facesContext.externalContext.request.contextPath}"/>

    <style>
        .panel-header {
            padding-left: 24px
        }

        .message-panel {
            float: left;
            padding-right: 10px;
        }

        .info-panel {
            padding-left: 25px
        }

        .message-block {
            margin-bottom: 3px;
            padding: 2px 3px;
        }

        .message-block:hover {
            background-color: lightgrey;
        }

        .message-panel-text{
            vertical-align: top;
        }

        .message-block-link{
            color: black;
            text-decoration:none;
            cursor:pointer;
        }

        .ui-layout-resizer-closed .layout-extractable-info{
            padding-left: 25px
        }

        .ui-layout-resizer-south .layout-extractable-info{
            line-height: 20px;
        }

        .ui-layout-resizer-south-closed {
            height: 20px !important;
            font-size: inherit !important;
            background: #ffffff;
        }

        #problems-panel-container > div:nth-child(1) {
            display: none;
        }
    </style>

    <div class="panel">
        <div class="panel-header container">
            <div class="info-panel layout-extractable-info">
                <div id="errors-info-panel" class='message-panel'>
                    <span class="message-panel-text">Errors:</span>
                    <span id="errors-count" class='badge badge-error'/>
                </div>
                <div id="warnings-info-panel" class='message-panel'>
                    <span class="message-panel-text">Warnings:</span>
                    <span id="warnings-count" class='badge badge-warning'/>
                </div>
                <div id="progress-info-panel" style="display: none" class='messagePanel'/>
            </div>
        </div>

        <div id="problems-panel-container" class="panel-body container">
            <div>
                <div class="message-block {messageTypeClass} problem-small">
                    <a class="message-block-link"
                       onclick="navigateProblem(this); return false;"
                       data-message-id="{messageId}">{messageSummary}</a>
                </div>
            </div>
            <div id="errors-panel"></div>
            <div id="warnings-panel"></div>
        </div>

        <script>
            //<![CDATA[
                const $jq = jQuery.noConflict();
                let messageId = -1;
                let messageIndex = -1;

                $jq('#progress-info-panel').off('refresh').on('refresh', function (e, state) {
                    //Hide progressbar and continue cycle in case if we closed current module or project but not opened another.
                    //Because script won't be restarted after reopening same module.
                    if (ws.storage.get("WS_PREVIOUS_PAGE_STATE").project === "" || ws.storage.get("WS_PREVIOUS_PAGE_STATE").module === "") {
                        ws.ui.problems.hide();
                        setTimeout(function () {$jq('#progress-info-panel').trigger('refresh', state)}, 1000);
                    //Stop current cycle because module or project was changed and script will be reinitialized with new cycle.
                    } else if (ws.storage.get("WS_PREVIOUS_PAGE_STATE").module !== state.moduleId || ws.storage.get("WS_PREVIOUS_PAGE_STATE").project !== state.projectId){
                        return;
                    } else {
                        $jq.ajax({
                            url: "#{contextPath}/web/compile/progress/" + messageId + "/" + messageIndex,
                            datatype: "json"
                        })
                        .done(function (data) {
                            if (data.modulesCount > 0) {
                                updateProgressPanel(data);
                            }
                            if (!data.compilationCompleted) {
                                inProgress();
                                setTimeout(function () {$jq('#progress-info-panel').trigger('refresh', state)}, 1000);
                            } else {
                                finished();
                                ws.nav.reloadPanel('left');
                            }
                        });
                    }
                });

                $jq('#progress-info-panel').trigger('refresh', {projectId: ws.storage.get("WS_PREVIOUS_PAGE_STATE").project, moduleId: ws.storage.get("WS_PREVIOUS_PAGE_STATE").module});

                function inProgress() {
                    $jq('#progress-info-panel').attr("data-compilation-status", "inProgress");
                    $jq('#progress-info-panel').show();
                    ws.ui.problems.show();
                };

                function finished() {
                    $jq('#progress-info-panel').attr("data-compilation-status", "finished");
                    var timestamp = Date.now();
                    $jq('#progress-info-panel').attr("data-compilation-finished", timestamp);
                    setTimeout(function() {
                       var requiredProgressPanel =
                            $j("#progress-info-panel[data-compilation-status='finished'][data-compilation-finished='" + timestamp + "']");
                       if (requiredProgressPanel.length > 0 ) {
                            requiredProgressPanel.hide();
                            requiredProgressPanel.text(requiredProgressPanel.text()); // To trigger observer
                            if ($jq('#warnings-count').text() == 0 && $jq('#errors-count').text() == 0) {
                                ws.ui.problems.hide()
                            }
                       }
                    }, 10000);
                };

                function updateProgressPanel(data) {
                    let percent = Math.round(data.modulesCompiled / data.modulesCount * 100);
                    if (!data.compilationCompleted && data.modulesCompiled === data.modulesCount) {
                        percent--;
                    }
                    $jq('#progress-info-panel').text("Loaded " + percent + "% (" + data.modulesCompiled + "/" + data.modulesCount + ")");
                    $jq('#errors-info-panel').toggle(data.errorsCount !== 0);
                    $jq('#errors-count').text(data.errorsCount);

                    $jq('#warnings-info-panel').toggle(data.warningsCount !== 0);
                    $jq('#warnings-count').text(data.warningsCount);

                    if (data.messageIndex !== -1 || data.messageId !== -1) {
                        messageIndex = data.messageIndex;
                        messageId = data.messageId;
                    }
                    let messages = data.messages || [];
                    if (messages.length !== 0) {
                        const warningsPanel = $j("#warnings-panel");
                        const errorsPanel = $j("#errors-panel");
                        let warningsHtml = "";
                        let errorsHtml = "";
                        const htmlTemplate = $j('#problems-panel-container>div:nth-child(1)').clone().html();

                        if (data.dataType === 'new') {
                            warningsPanel.empty();
                            errorsPanel.empty();
                        }

                        messages.forEach(function (item) {
                            const newMessageHtml = htmlTemplate.replace(/{messageId}/g, item.id)
                                .replace(/{messageSummary}/g, ws.utils.escapeHtml(item.summary));
                            if (item.severity === 'WARN') {
                                warningsPanel.append(newMessageHtml.replace(/{messageTypeClass}/g, 'problem-warning'));
                            } else if (item.severity === 'ERROR') {
                                errorsPanel.append(newMessageHtml.replace(/{messageTypeClass}/g, 'problem-error'));
                            }
                        });
                    }
                }

                function navigateProblem(problemBlock) {
                    var $j = jQuery.noConflict();
                    const problem = $j(problemBlock);
                    $j.ajax({
                        url: "#{contextPath}/web/message/" + problem.attr("data-message-id") + "/url",
                        datatype: "text"
                    })
                    .done(function (data) {
                       document.location.href = data;
                    });
                }
            //]]>
        </script>
    </div>

</ui:composition>
